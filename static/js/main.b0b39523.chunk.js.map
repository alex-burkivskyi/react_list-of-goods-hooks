{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","reducer","state","action","copy","data","type","sort","a","b","length","localeCompare","reverse","error","Error","App","useState","permission","setPermission","useReducer","dispatch","className","onClick","map","good","Math","random","ReactDOM","render","document","getElementById"],"mappings":"iOAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUF,SAASC,EAAQC,EAAcC,GAC7B,IAAMC,EAAI,YAAOF,EAAMG,MAEvB,OAAQF,EAAOG,MACb,IAAK,WACH,MAAO,CAAED,KAAMD,EAAKG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,WAClD,IAAK,aACH,MAAO,CAAEL,KAAMD,EAAKG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,cAAcF,OACrD,IAAK,QACH,MAAO,CAAEJ,KAAML,GACjB,IAAK,UACH,MAAO,CAAEK,KAAMD,EAAKQ,WACtB,QACE,MAAO,CAAEC,MAAO,IAAIC,MAAM,sBAAuBT,KAAMD,IAItD,IAAMW,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAA6BC,qBAAWlB,EAAS,CAAEI,KAAML,IAAzD,mBAASK,EAAT,KAASA,KAAQe,EAAjB,KAMA,OACE,qBAAKC,UAAU,MAAf,SACIJ,EAWE,qCACE,wBACEX,KAAK,SACLe,UAAU,+BACVC,QAAS,kBAAMF,EAAS,CAAEd,KAAM,gBAHlC,iCAQA,wBACEA,KAAK,SACLe,UAAU,+BACVC,QAAS,kBAAMF,EAAS,CAAEd,KAAM,cAHlC,4BAQA,wBACEA,KAAK,SACLe,UAAU,+BACVC,QAAS,kBAAMF,EAAS,CAAEd,KAAM,aAHlC,qBAQA,wBACEA,KAAK,SACLe,UAAU,8BACVC,QAAS,kBAAMF,EAAS,CAAEd,KAAM,WAHlC,mBAQA,oBAAIe,UAAU,cAAd,SACGhB,EAAKkB,KAAI,SAAAC,GACR,OACE,oBACEH,UAAU,yBADZ,SAIGG,GAFIA,EAAOC,KAAKC,kBA/C3B,wBACEpB,KAAK,SACLe,UAAU,+BACVC,QAXgB,WACxBJ,GAAc,IAOR,sBClDVS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b0b39523.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Action = { type: string };\n\ntype State = {\n  data: string[];\n  error?: Error,\n};\n\nfunction reducer(state: State, action: Action): State {\n  const copy = [...state.data];\n\n  switch (action.type) {\n    case 'byLength':\n      return { data: copy.sort((a, b) => a.length - b.length) };\n    case 'byAlphabet':\n      return { data: copy.sort((a, b) => a.localeCompare(b)) };\n    case 'reset':\n      return { data: goodsFromServer };\n    case 'reverse':\n      return { data: copy.reverse() };\n    default:\n      return { error: new Error('something go wrong'), data: copy };\n  }\n}\n\nexport const App: React.FC = () => {\n  const [permission, setPermission] = useState(false);\n\n  const [{ data }, dispatch] = useReducer(reducer, { data: goodsFromServer });\n\n  const permissionHandler = () => {\n    setPermission(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {!permission\n        ? (\n          <button\n            type=\"button\"\n            className=\"button is-primary is-rounded\"\n            onClick={permissionHandler}\n          >\n            Start\n          </button>\n        )\n        : (\n          <>\n            <button\n              type=\"button\"\n              className=\"button is-primary is-rounded\"\n              onClick={() => dispatch({ type: 'byAlphabet' })}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-primary is-rounded\"\n              onClick={() => dispatch({ type: 'byLength' })}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-warning is-rounded\"\n              onClick={() => dispatch({ type: 'reverse' })}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-danger is-rounded\"\n              onClick={() => dispatch({ type: 'reset' })}\n            >\n              Reset\n            </button>\n\n            <ul className=\"Goods level\">\n              {data.map(good => {\n                return (\n                  <li\n                    className=\"Goods__item level-item\"\n                    key={good + Math.random()}\n                  >\n                    {good}\n                  </li>\n                );\n              })}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}